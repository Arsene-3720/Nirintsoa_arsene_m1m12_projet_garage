const express = require('express');
const router = express.Router();
const Client = require('../models/Client');
const Utilisateur = require('../models/utilisateur');
const InformationClient = require('../models/InfoClient');
const Vehicule = require('../models/Vehicule');
const bcrypt = require('bcryptjs');

// POST /clients : enregistrement
router.post('/register-client', async (req, res) => {
  try {
    console.log('=== D√âBUT DEBUG INSCRIPTION COMPL√àTE ===');
    console.log('Body re√ßu:', JSON.stringify(req.body, null, 2));

    const {
      nom, prenom, email, dateNaissance, telephone, motDePasse,
      adresse, codePostal, ville, autresInfos, vehicule
    } = req.body;

    // ‚ö†Ô∏è LOGS CRITIQUES - √Ä SURVEILLER
    console.log('=== ANALYSE MOT DE PASSE RE√áU ===');
    console.log('Mot de passe re√ßu (brut):', `"${motDePasse}"`);
    console.log('Type:', typeof motDePasse);
    console.log('Length:', motDePasse?.length);
    console.log('Is string:', typeof motDePasse === 'string');
    console.log('Bytes du mot de passe:', Array.from(motDePasse || '').map(c => `${c}(${c.charCodeAt(0)})`));

    // V√©rifier si l'email existe d√©j√†
    const existingUser = await Utilisateur.findOne({ email });
    if (existingUser) {
      console.log('Email d√©j√† utilis√©:', email);
      return res.status(400).json({ message: 'Cet email est d√©j√† utilis√©.' });
    }

    // ‚ö†Ô∏è POINT CRITIQUE - HASHAGE
    console.log('=== PROCESSUS DE HASHAGE ===');
    console.log('Avant hashage - mot de passe:', `"${motDePasse}"`);
    
    const hashedPassword = await bcrypt.hash(motDePasse, 10);
    
    console.log('Apr√®s hashage - hash cr√©√©:', hashedPassword);
    console.log('Length du hash:', hashedPassword.length);

    // ‚ö†Ô∏è TEST IMM√âDIAT CRITIQUE
    console.log('=== TEST IMM√âDIAT APR√àS HASHAGE ===');
    const testImmediat1 = await bcrypt.compare(motDePasse, hashedPassword);
    console.log('Test avec mot de passe original:', testImmediat1 ? '‚úÖ' : '‚ùå');

    // Tests avec variations
    const testTrim = await bcrypt.compare(motDePasse.trim(), hashedPassword);
    console.log('Test avec trim:', testTrim ? '‚úÖ' : '‚ùå');

    if (!testImmediat1) {
      console.log('üö® PROBL√àME D√âTECT√â - Le hash ne correspond pas au mot de passe !');
      console.log('Ceci explique pourquoi la connexion ne marche pas !');
      
      // Investigations suppl√©mentaires
      const testString = await bcrypt.compare(String(motDePasse), hashedPassword);
      console.log('Test avec String():', testString ? '‚úÖ' : '‚ùå');
      
      return res.status(500).json({ 
        message: 'Erreur de hashage d√©tect√©e', 
        debug: 'Le mot de passe ne correspond pas au hash cr√©√©' 
      });
    }

    // √âtapes de cr√©ation (seulement si le test passe)
    const info = await InformationClient.create({
      adresse, codePostal, ville, autresInfos
    });
    console.log('InformationClient cr√©√©:', info._id);

    const nouveauClient = await Client.create({
      nom, prenom, email, dateNaissance, telephone,
      informations: info._id
    });
    console.log('Client cr√©√©:', nouveauClient._id);

    // ‚ö†Ô∏è CR√âATION UTILISATEUR - MOMENT CRITIQUE
    console.log('=== CR√âATION UTILISATEUR ===');
    console.log('Hash qui va √™tre stock√©:', hashedPassword);
    
    const utilisateur = await Utilisateur.create({
      email,
      motDePasse: hashedPassword,
      role: 'client',
      refId: nouveauClient._id,
      roleModel: 'Client'
    });
    
    console.log('Utilisateur cr√©√© avec ID:', utilisateur._id);

    // ‚ö†Ô∏è V√âRIFICATION POST-CR√âATION
    console.log('=== V√âRIFICATION POST-CR√âATION ===');
    const utilisateurVerif = await Utilisateur.findOne({ email });
    console.log('Hash r√©cup√©r√© de la BDD:', utilisateurVerif.motDePasse);
    console.log('Hash identique?', hashedPassword === utilisateurVerif.motDePasse);

    const testPostCreation = await bcrypt.compare(motDePasse, utilisateurVerif.motDePasse);
    console.log('Test apr√®s cr√©ation:', testPostCreation ? '‚úÖ OK' : '‚ùå √âCHEC');

    if (!testPostCreation) {
      console.log('üö® PROBL√àME POST-CR√âATION - Le mot de passe ne marche plus apr√®s sauvegarde !');
    }

    // Cr√©er v√©hicule si fourni
    if (vehicule && vehicule.marque) {
      const veh = await Vehicule.create({
        client: nouveauClient._id,
        marque: vehicule.marque,
        modele: vehicule.modele,
        immatriculation: vehicule.immatriculation,
        annee: vehicule.annee
      });
      console.log('V√©hicule cr√©√©:', veh._id);
    }

    console.log('=== INSCRIPTION TERMIN√âE ===');
    res.status(201).json({ 
      message: 'Client inscrit avec succ√®s',
      debug: {
        hashTest: testPostCreation,
        userId: utilisateur._id
      }
    });

  } catch (err) {
    console.error('Erreur compl√®te inscription:', err);
    res.status(500).json({ message: 'Erreur serveur', error: err.message });
  }
});



router.post('/login-client', async (req, res) => {
  const { email, motDePasse } = req.body;

  // V√©rification initiale
  if (!email || !motDePasse) {
    return res.status(400).json({ status: 'error', message: 'Email et mot de passe requis.' });
  }

  console.log('=== D√âBUT DEBUG LOGIN ===');
  console.log('Email re√ßu:', email);
  console.log('Mot de passe re√ßu (brut):', `"${motDePasse}"`);
  console.log('Length mot de passe:', motDePasse.length);
  console.log('Mot de passe trim√©:', `"${motDePasse.trim()}"`);
  console.log('Length apr√®s trim:', motDePasse.trim().length);

  try {
    // Chercher l'utilisateur client
    const utilisateur = await Utilisateur.findOne({ email, role: 'client' });
    if (!utilisateur) {
      console.log('Utilisateur non trouv√©');
      return res.status(404).json({ status: 'not-found', message: 'Aucun compte trouv√©.' });
    }

    console.log('Hash stock√© en BDD:', utilisateur.motDePasse);
    console.log('Length du hash:', utilisateur.motDePasse.length);

    // Test 1: Comparaison normale
    const valid = await bcrypt.compare(motDePasse.trim(), utilisateur.motDePasse);
    console.log('R√©sultat comparaison bcrypt (trim):', valid);

    // Test 2: Comparaison sans trim
    const validNoTrim = await bcrypt.compare(motDePasse, utilisateur.motDePasse);
    console.log('R√©sultat comparaison bcrypt (no trim):', validNoTrim);

    // Test 3: Cr√©er un nouveau hash avec le m√™me mot de passe pour tester
    const nouveauHash = await bcrypt.hash(motDePasse.trim(), 10);
    console.log('Nouveau hash cr√©√©:', nouveauHash);
    const testAvecNouveauHash = await bcrypt.compare(motDePasse.trim(), nouveauHash);
    console.log('Test avec nouveau hash:', testAvecNouveauHash);

    // Test 4: V√©rifier si le hash stock√© est valide
    const isValidHash = /^\$2[abxy]?\$\d+\$/.test(utilisateur.motDePasse);
    console.log('Hash stock√© est-il valide?', isValidHash);

    if (!valid && !validNoTrim) {
      console.log('=== √âCHEC DE L\'AUTHENTIFICATION ===');
      return res.status(401).json({ status: 'error', message: 'Mot de passe incorrect.' });
    }

    // R√©cup√©rer infos client
    const client = await Client.findById(utilisateur.refId).populate('informations');
    if (!client) {
      return res.status(404).json({ status: 'not-found', message: 'Client introuvable.' });
    }

    // Supprimer mot de passe avant envoi
    const { motDePasse: _, ...clientData } = utilisateur.toObject();

    console.log('=== CONNEXION R√âUSSIE ===');
    res.json({ status: 'ok', message: 'Connexion r√©ussie', client: clientData });

  } catch (err) {
    console.error('Erreur login-client:', err);
    res.status(500).json({ status: 'error', message: 'Erreur serveur', error: err.message });
  }
});

module.exports = router;





// GET /clients/:id : r√©cup√©rer un client
router.get('/:id', async (req, res) => {
  try {
    const client = await Client.findById(req.params.id).populate('informations');
    if (!client) return res.status(404).json({ error: 'Client non trouv√©' });
    res.json(client);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// PUT /clients/:id : mettre √† jour
router.put('/:id', async (req, res) => {
  try {
    const updatedClient = await Client.findByIdAndUpdate(req.params.id, req.body, { new: true });
    res.json(updatedClient);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// DELETE /clients/:id : supprimer
router.delete('/:id', async (req, res) => {
  try {
    await Client.findByIdAndDelete(req.params.id);
    res.json({ message: 'Client supprim√©' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

module.exports = router;
